name: Deploy to AWS ECS

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Select Deployment Environment"
        required: true
        default: "prod"
        type: choice
        options:
          - stage
          - prod

jobs:
  deploy:
    name: Build, Push & Deploy
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: av-ecs-app
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      AWS_REGION: us-east-1
      CONTAINER_NAME: av-ecs-app

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Environment Variables
        run: |
          echo "ECS_CLUSTER=${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-ecs" >> $GITHUB_ENV
          echo "ECS_SERVICE=${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-ecs-service" >> $GITHUB_ENV
          echo "ECR_REPO=${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-ecr" >> $GITHUB_ENV
          echo "ECS_TASK_DEFINITION=${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-task-definition" >> $GITHUB_ENV

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO:${{ github.sha }} .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO:${{ github.sha }}

      - name: Download Task Definition
        run: |
          aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition \
          --region ${{ env.AWS_REGION }} > task-definition.json

      - name: test
        run: |
          pwd
          ls

      - name: Update image in the Task Definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO:${{ github.sha }}
  
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          wait-for-service-stability: true
