name: Deploy to AWS ECS

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Select Deployment Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev

jobs:
  deploy:
    name: Build, Push & Deploy
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: av-ecs-app
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      AWS_REGION: us-east-1

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Environment Variables
        run: |
          echo "ECS_CLUSTER=${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-ecs" >> $GITHUB_ENV
          echo "ECS_SERVICE=${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-ecs-service" >> $GITHUB_ENV
          echo "ECR_REPO=${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-ecr" >> $GITHUB_ENV

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO:latest .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO:latest

      # - name: Update ECS Task Definition
      #   run: |
      #     jq --arg IMAGE_URI "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:latest" '.containerDefinitions[0].image = $IMAGE_URI' $TASK_DEFINITION > updated-task-definition.json
      #     mv updated-task-definition.json $TASK_DEFINITION

      # - name: Register Updated Task Definition
      #   id: register-task-def
      #   run: |
      #     TASK_REVISION=$(aws ecs register-task-definition --cli-input-json file://$TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')
      #     echo "TASK_REVISION=$TASK_REVISION" >> $GITHUB_ENV

      # - name: Deploy to ECS
      #   run: |
      #     aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_REVISION --force-new-deployment

      # - name: Wait for Deployment Stabilization
      #   run: sleep 30

      # - name: Validate Deployment
      #   run: |
      #     RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
      #     if [ $RESPONSE -ne 200 ]; then
      #       echo "Health check failed with status $RESPONSE"
      #       exit 1
      #     fi
      #     echo "Deployment successful!"
